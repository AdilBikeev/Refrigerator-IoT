// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RefrigeratorServerSide.Data;

namespace RefrigeratorServerSide.Migrations
{
    [DbContext(typeof(RefrigeratorContext))]
    [Migration("20201011182636_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RefrigeratorServerSide.Models.Place", b =>
                {
                    b.Property<int>("placeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("foodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("pressure")
                        .HasColumnType("real");

                    b.HasKey("placeId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("RefrigeratorServerSide.Models.Refrigerator", b =>
                {
                    b.Property<string>("RefrigeratorUUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefrigeratorUUID");

                    b.ToTable("Refrigerator");
                });

            modelBuilder.Entity("RefrigeratorServerSide.Models.RefrigeratorBlock", b =>
                {
                    b.Property<string>("BlockUUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrigeratorUUID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BlockUUID");

                    b.HasIndex("RefrigeratorUUID");

                    b.ToTable("RefrigeratorBlock");
                });

            modelBuilder.Entity("RefrigeratorServerSide.Models.SensorData", b =>
                {
                    b.Property<string>("SensorUUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockUUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorUUID");

                    b.HasIndex("BlockUUID");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("RefrigeratorServerSide.Models.RefrigeratorBlock", b =>
                {
                    b.HasOne("RefrigeratorServerSide.Models.Refrigerator", "Refrigerator")
                        .WithMany()
                        .HasForeignKey("RefrigeratorUUID");
                });

            modelBuilder.Entity("RefrigeratorServerSide.Models.SensorData", b =>
                {
                    b.HasOne("RefrigeratorServerSide.Models.RefrigeratorBlock", "RefrigeratorBlock")
                        .WithMany()
                        .HasForeignKey("BlockUUID");
                });
#pragma warning restore 612, 618
        }
    }
}
